package dev.namn.cli

import dev.namn.cli.models.FlavorInfo
import dev.namn.cli.models.ProjectInfo

/**
 * Utility class for formatting CLI output with beautiful tables and emojis
 */
class OutputFormatter {

    /**
     * Displays project information with beautiful formatting
     */
    fun displayProjectInfo(projectInfo: ProjectInfo) {
        println()
        println("🚀 Project: ${projectInfo.name}")
        println("📱 Android Build Configuration")
        println()
        
        displayFlavors(projectInfo.flavors)
        
        if (projectInfo.buildTypes.isNotEmpty()) {
            displayBuildTypes(projectInfo.buildTypes)
        }
        
        println()
        println("✨ Generated by grw CLI with Gradle Tooling API")
        println()
    }

    /**
     * Displays product flavors in a beautiful table format
     */
    private fun displayFlavors(flavors: List<FlavorInfo>) {
        println("🎯 Product Flavors:")
        println("┌─────────────────────────────────────────┐")
        
        if (flavors.isEmpty()) {
            println("│ No product flavors configured           │")
        } else {
            flavors.forEach { flavor ->
                val nameDisplay = "│ • ${flavor.name}".padEnd(39) + "│"
                println(nameDisplay)
                
                if (flavor.dimension != null) {
                    val dimDisplay = "│   └─ dimension: ${flavor.dimension}".padEnd(39) + "│"
                    println(dimDisplay)
                }
            }
        }
        
        println("└─────────────────────────────────────────┘")
    }

    /**
     * Displays build types in a beautiful table format
     */
    private fun displayBuildTypes(buildTypes: List<String>) {
        println()
        println("🏗️  Build Types:")
        println("┌─────────────────────────────────────────┐")
        
        buildTypes.forEach { buildType ->
            val display = "│ • $buildType".padEnd(39) + "│"
            println(display)
        }
        
        println("└─────────────────────────────────────────┘")
    }
} 
